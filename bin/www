#!/usr/bin/env node

/**
 * Module dependencies.
 */

/* eslint-disable */

const debug = require('debug')('unsplash:server');
const http = require('http');
const app = require('../app');
const browserSync = require('browser-sync');

/**
 * Get port from environment and store in Express.
 */

const port = normalizePort(process.env.PORT || '3000');
const isProduction = 'production' === process.env.NODE_ENV;
app.set('port', port);

/**
 * Create HTTP server.
 */

const server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
    const port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    const bind = typeof port === 'string' ? `Pipe ${port}` : `Port ${port}`;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(`${bind} requires elevated privileges`);
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(`${bind} is already in use`);
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function bSync() {
    if (!isProduction) {
        // https://ponyfoo.com/articles/a-browsersync-primer#inside-a-node-application
        browserSync({
            online: false,
            open: false,
            port: port + 1,
            proxy: 'localhost:' + port,
            ui: {
                port: 3002,
            },
            files: ['*.css', '*.js', '*.pug', '*.css', '*.html'],
            watchEvents: ['change'],
            cors: true,
            notify: true,
            reloadDelay: 500,
        });
    }
}

function onListening() {
    const addr = server.address();
    const bind = typeof addr === 'string' ? `pipe ${addr}` : `port ${addr.port}`;
    debug(`APP is Listening on ${bind}`);
    // bSync();

    console.log(`Demo server available on http://localhost:${port}`);
}
